clear all; close all;
addpath('Functions'); 
M=2;  % #nonzeros  EB/N0 in dB     % dB
run = 100; %2e4;
randsize = 2+ ceil(rand(1,2)*16);
Nt = max(randsize); B = Nt;
Nr = min(randsize); n = Nr;
% moduTypes = {'3psk','3psk','3psk'}; %

% moduTypes = {'bpsk','bpsk','bpsk','bpsk'};
% Ks = ones(1,4);
% offsets = [0,1,2,3];
% Ms = [2,2,2,2];
% constls = genConstls(moduTypes);
qam16 = 0;
% bits per symbol for each antenna


tic
for i = 1:run
%     for j = 1:run/8
    cellA={'3psk'};
    moduTypes = repmat(cellA,1,Nt);
    Ks = 2* ones(1,Nt);

    % coding matrix: 
    A = randn(Nr,Nt); % sqrt(1/2)*(randn(Nr,Nt) + 1j* randn(Nr,Nt));     % complex

    % H*txSymbs;
    rxSymbs = zeros(Nr,1); 

    % PPMd
    [mindproperty,~,~] = calculateED(A,0,1);
    D = mindproperty(1,1);

    % MPPMd
    MPPM = MPPMset(B,1,M) * sqrt(1/M);
    C = A * MPPM;
    dmatrix = calculateDmatrix(C,0);
    MPPMsetsize = size(dmatrix,1);

    % MPPM node pairs
    pairidx_linear = find(dmatrix< D);
    [pairidx_row,pairidx_col] = ind2sub(size(dmatrix),pairidx_linear);
    pairidx_no = find(pairidx_row ~= pairidx_col);
%     pairdebug = [pairidx_row(pairidx_half_idx),pairidx_col(pairidx_half_idx )];
    pair_idx_bf = sub2ind(size(dmatrix),pairidx_row(pairidx_no), pairidx_col(pairidx_no));

    % SD node pairs
    [nodelist, nVistedNodes] = SD_searchpair(A,rxSymbs,moduTypes,M,D);
     nodeset = getNodeset(B,M);
     v = length(nodeset);
     nodeset_new = zeros(size(nodelist{:,3}));
     for vv = 1:v
         idx = find(nodelist{:,3} == nodeset(vv));
         nodeset_new(idx) = vv;
     end
     
%      if sum(find(nodeset_new(:, 1) <= nodeset_new(:, 2) ))
%         disp('wrong in getNodeset');
%      end
    
     pair_idx_SD = sub2ind(size(dmatrix),[nodeset_new(:,1); nodeset_new(:,2)],[nodeset_new(:,2);nodeset_new(:,1)]);
     % comparison
    set = ismember(pair_idx_bf,pair_idx_SD);
    set_diff = setdiff(pair_idx_bf,pair_idx_SD);
    if length(set_diff)>
    if all(set)   % if not all 1
        filename = "notright"+run;
%         save('filename');
        disp('SD > BF');
    end
%     end
end
toc

function set = getNodeset(B,M)
    idx_pair1 = nchoosek(1: B,M);
%     idx_pair1 = B + 1 - idx_pair1;
    set = sum((2).^(idx_pair1-1),2);  
%     set = sort(set); % value from small to large
%     seet = flip(set);   % value from large to small
%     set = sort(set);
end
